/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiAuthLoginPost } from '../fn/auth/api-auth-login-post';
import { ApiAuthLoginPost$Params } from '../fn/auth/api-auth-login-post';
import { apiAuthLoginPost$Plain } from '../fn/auth/api-auth-login-post-plain';
import { ApiAuthLoginPost$Plain$Params } from '../fn/auth/api-auth-login-post-plain';
import { apiAuthRegisterPost } from '../fn/auth/api-auth-register-post';
import { ApiAuthRegisterPost$Params } from '../fn/auth/api-auth-register-post';
import { apiAuthRegisterPost$Plain } from '../fn/auth/api-auth-register-post-plain';
import { ApiAuthRegisterPost$Plain$Params } from '../fn/auth/api-auth-register-post-plain';
import { ApiAuthResult } from '../models/api-auth-result';

@Injectable({ providedIn: 'root' })
export class AuthApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiAuthLoginPost()` */
  static readonly ApiAuthLoginPostPath = '/api/Auth/Login';

  /**
   * Аутентификация пользователя на основе учетных данных.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthLoginPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthLoginPost$Plain$Response(params?: ApiAuthLoginPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiAuthResult>> {
    return apiAuthLoginPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Аутентификация пользователя на основе учетных данных.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthLoginPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthLoginPost$Plain(params?: ApiAuthLoginPost$Plain$Params, context?: HttpContext): Observable<ApiAuthResult> {
    return this.apiAuthLoginPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiAuthResult>): ApiAuthResult => r.body)
    );
  }

  /**
   * Аутентификация пользователя на основе учетных данных.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthLoginPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthLoginPost$Response(params?: ApiAuthLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiAuthResult>> {
    return apiAuthLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Аутентификация пользователя на основе учетных данных.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthLoginPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthLoginPost(params?: ApiAuthLoginPost$Params, context?: HttpContext): Observable<ApiAuthResult> {
    return this.apiAuthLoginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiAuthResult>): ApiAuthResult => r.body)
    );
  }

  /** Path part for operation `apiAuthRegisterPost()` */
  static readonly ApiAuthRegisterPostPath = '/api/Auth/Register';

  /**
   * Регистрирует нового пользователя с указанными данными.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthRegisterPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthRegisterPost$Plain$Response(params?: ApiAuthRegisterPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiAuthRegisterPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Регистрирует нового пользователя с указанными данными.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthRegisterPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthRegisterPost$Plain(params?: ApiAuthRegisterPost$Plain$Params, context?: HttpContext): Observable<string> {
    return this.apiAuthRegisterPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /**
   * Регистрирует нового пользователя с указанными данными.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthRegisterPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthRegisterPost$Response(params?: ApiAuthRegisterPost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiAuthRegisterPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Регистрирует нового пользователя с указанными данными.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthRegisterPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAuthRegisterPost(params?: ApiAuthRegisterPost$Params, context?: HttpContext): Observable<string> {
    return this.apiAuthRegisterPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
