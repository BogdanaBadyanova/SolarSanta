/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addInterestsPost } from '../fn/user/add-interests-post';
import { AddInterestsPost$Params } from '../fn/user/add-interests-post';
import { addInterestsPost$Plain } from '../fn/user/add-interests-post-plain';
import { AddInterestsPost$Plain$Params } from '../fn/user/add-interests-post-plain';
import { currentUserGet } from '../fn/user/current-user-get';
import { CurrentUserGet$Params } from '../fn/user/current-user-get';
import { currentUserGet$Plain } from '../fn/user/current-user-get-plain';
import { CurrentUserGet$Plain$Params } from '../fn/user/current-user-get-plain';
import { idGet } from '../fn/user/id-get';
import { IdGet$Params } from '../fn/user/id-get';
import { idGet$Plain } from '../fn/user/id-get-plain';
import { IdGet$Plain$Params } from '../fn/user/id-get-plain';
import { ApiParticipantView } from '../models/api-participant-view';
import { updatePut } from '../fn/user/update-put';
import { UpdatePut$Params } from '../fn/user/update-put';
import { updatePut$Plain } from '../fn/user/update-put-plain';
import { UpdatePut$Plain$Params } from '../fn/user/update-put-plain';

@Injectable({ providedIn: 'root' })
export class UserApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `currentUserGet()` */
  static readonly CurrentUserGetPath = '/current-user';

  /**
   * Возвращает информацию о текущем аутентифицированном пользователе.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `currentUserGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  currentUserGet$Plain$Response(params?: CurrentUserGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiParticipantView>> {
    return currentUserGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Возвращает информацию о текущем аутентифицированном пользователе.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `currentUserGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  currentUserGet$Plain(params?: CurrentUserGet$Plain$Params, context?: HttpContext): Observable<ApiParticipantView> {
    return this.currentUserGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiParticipantView>): ApiParticipantView => r.body)
    );
  }

  /**
   * Возвращает информацию о текущем аутентифицированном пользователе.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `currentUserGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  currentUserGet$Response(params?: CurrentUserGet$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiParticipantView>> {
    return currentUserGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Возвращает информацию о текущем аутентифицированном пользователе.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `currentUserGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  currentUserGet(params?: CurrentUserGet$Params, context?: HttpContext): Observable<ApiParticipantView> {
    return this.currentUserGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiParticipantView>): ApiParticipantView => r.body)
    );
  }

  /** Path part for operation `idGet()` */
  static readonly IdGetPath = '/{id}';

  /**
   * Получение данных выбранного участника.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `idGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  idGet$Plain$Response(params: IdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiParticipantView>> {
    return idGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Получение данных выбранного участника.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `idGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  idGet$Plain(params: IdGet$Plain$Params, context?: HttpContext): Observable<ApiParticipantView> {
    return this.idGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiParticipantView>): ApiParticipantView => r.body)
    );
  }

  /**
   * Получение данных выбранного участника.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `idGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  idGet$Response(params: IdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiParticipantView>> {
    return idGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Получение данных выбранного участника.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `idGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  idGet(params: IdGet$Params, context?: HttpContext): Observable<ApiParticipantView> {
    return this.idGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiParticipantView>): ApiParticipantView => r.body)
    );
  }

  /** Path part for operation `updatePut()` */
  static readonly UpdatePutPath = '/update';

  /**
   * Обновляет данные текущего пользователя.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updatePut$Plain$Response(params?: UpdatePut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updatePut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Обновляет данные текущего пользователя.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updatePut$Plain(params?: UpdatePut$Plain$Params, context?: HttpContext): Observable<string> {
    return this.updatePut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /**
   * Обновляет данные текущего пользователя.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updatePut$Response(params?: UpdatePut$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updatePut(this.http, this.rootUrl, params, context);
  }

  /**
   * Обновляет данные текущего пользователя.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  updatePut(params?: UpdatePut$Params, context?: HttpContext): Observable<string> {
    return this.updatePut$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `addInterestsPost()` */
  static readonly AddInterestsPostPath = '/add-interests';

  /**
   * Добавляет интересы текущему пользователю.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addInterestsPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addInterestsPost$Plain$Response(params?: AddInterestsPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addInterestsPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Добавляет интересы текущему пользователю.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addInterestsPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addInterestsPost$Plain(params?: AddInterestsPost$Plain$Params, context?: HttpContext): Observable<string> {
    return this.addInterestsPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /**
   * Добавляет интересы текущему пользователю.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addInterestsPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addInterestsPost$Response(params?: AddInterestsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addInterestsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Добавляет интересы текущему пользователю.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addInterestsPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  addInterestsPost(params?: AddInterestsPost$Params, context?: HttpContext): Observable<string> {
    return this.addInterestsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
